// source: models/approval.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var models_user_pb = require('../models/user_pb.js');
goog.object.extend(proto, models_user_pb);
goog.exportSymbol('proto.sym.models.Approval', null, global);
goog.exportSymbol('proto.sym.models.Approval.Meta', null, global);
goog.exportSymbol('proto.sym.models.Approval.Schema', null, global);
goog.exportSymbol('proto.sym.models.Approval.Users', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sym.models.Approval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sym.models.Approval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sym.models.Approval.displayName = 'proto.sym.models.Approval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sym.models.Approval.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sym.models.Approval.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sym.models.Approval.Schema.displayName = 'proto.sym.models.Approval.Schema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sym.models.Approval.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sym.models.Approval.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sym.models.Approval.Meta.displayName = 'proto.sym.models.Approval.Meta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sym.models.Approval.Users = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sym.models.Approval.Users, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sym.models.Approval.Users.displayName = 'proto.sym.models.Approval.Users';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sym.models.Approval.prototype.toObject = function(opt_includeInstance) {
  return proto.sym.models.Approval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sym.models.Approval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schema: (f = msg.getSchema()) && proto.sym.models.Approval.Schema.toObject(includeInstance, f),
    users: (f = msg.getUsers()) && proto.sym.models.Approval.Users.toObject(includeInstance, f),
    meta: (f = msg.getMeta()) && proto.sym.models.Approval.Meta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sym.models.Approval}
 */
proto.sym.models.Approval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sym.models.Approval;
  return proto.sym.models.Approval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sym.models.Approval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sym.models.Approval}
 */
proto.sym.models.Approval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.sym.models.Approval.Schema;
      reader.readMessage(value,proto.sym.models.Approval.Schema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.sym.models.Approval.Users;
      reader.readMessage(value,proto.sym.models.Approval.Users.deserializeBinaryFromReader);
      msg.setUsers(value);
      break;
    case 4:
      var value = new proto.sym.models.Approval.Meta;
      reader.readMessage(value,proto.sym.models.Approval.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sym.models.Approval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sym.models.Approval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sym.models.Approval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sym.models.Approval.Schema.serializeBinaryToWriter
    );
  }
  f = message.getUsers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sym.models.Approval.Users.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sym.models.Approval.Meta.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sym.models.Approval.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.sym.models.Approval.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sym.models.Approval.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sym.models.Approval.Schema}
 */
proto.sym.models.Approval.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sym.models.Approval.Schema;
  return proto.sym.models.Approval.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sym.models.Approval.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sym.models.Approval.Schema}
 */
proto.sym.models.Approval.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sym.models.Approval.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sym.models.Approval.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sym.models.Approval.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.sym.models.Approval.Schema.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.sym.models.Approval.Schema} returns this
 */
proto.sym.models.Approval.Schema.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sym.models.Approval.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.sym.models.Approval.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sym.models.Approval.Meta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resource: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sym.models.Approval.Meta}
 */
proto.sym.models.Approval.Meta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sym.models.Approval.Meta;
  return proto.sym.models.Approval.Meta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sym.models.Approval.Meta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sym.models.Approval.Meta}
 */
proto.sym.models.Approval.Meta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sym.models.Approval.Meta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sym.models.Approval.Meta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sym.models.Approval.Meta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.Meta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.sym.models.Approval.Meta.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sym.models.Approval.Meta} returns this
 */
proto.sym.models.Approval.Meta.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string resource = 2;
 * @return {string}
 */
proto.sym.models.Approval.Meta.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sym.models.Approval.Meta} returns this
 */
proto.sym.models.Approval.Meta.prototype.setResource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sym.models.Approval.Users.prototype.toObject = function(opt_includeInstance) {
  return proto.sym.models.Approval.Users.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sym.models.Approval.Users} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.Users.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && models_user_pb.User.toObject(includeInstance, f),
    approver: (f = msg.getApprover()) && models_user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sym.models.Approval.Users}
 */
proto.sym.models.Approval.Users.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sym.models.Approval.Users;
  return proto.sym.models.Approval.Users.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sym.models.Approval.Users} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sym.models.Approval.Users}
 */
proto.sym.models.Approval.Users.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new models_user_pb.User;
      reader.readMessage(value,models_user_pb.User.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new models_user_pb.User;
      reader.readMessage(value,models_user_pb.User.deserializeBinaryFromReader);
      msg.setApprover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sym.models.Approval.Users.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sym.models.Approval.Users.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sym.models.Approval.Users} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sym.models.Approval.Users.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      models_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getApprover();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      models_user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User target = 1;
 * @return {?proto.sym.models.User}
 */
proto.sym.models.Approval.Users.prototype.getTarget = function() {
  return /** @type{?proto.sym.models.User} */ (
    jspb.Message.getWrapperField(this, models_user_pb.User, 1));
};


/**
 * @param {?proto.sym.models.User|undefined} value
 * @return {!proto.sym.models.Approval.Users} returns this
*/
proto.sym.models.Approval.Users.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sym.models.Approval.Users} returns this
 */
proto.sym.models.Approval.Users.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sym.models.Approval.Users.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User approver = 2;
 * @return {?proto.sym.models.User}
 */
proto.sym.models.Approval.Users.prototype.getApprover = function() {
  return /** @type{?proto.sym.models.User} */ (
    jspb.Message.getWrapperField(this, models_user_pb.User, 2));
};


/**
 * @param {?proto.sym.models.User|undefined} value
 * @return {!proto.sym.models.Approval.Users} returns this
*/
proto.sym.models.Approval.Users.prototype.setApprover = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sym.models.Approval.Users} returns this
 */
proto.sym.models.Approval.Users.prototype.clearApprover = function() {
  return this.setApprover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sym.models.Approval.Users.prototype.hasApprover = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sym.models.Approval.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sym.models.Approval} returns this
 */
proto.sym.models.Approval.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Schema schema = 2;
 * @return {?proto.sym.models.Approval.Schema}
 */
proto.sym.models.Approval.prototype.getSchema = function() {
  return /** @type{?proto.sym.models.Approval.Schema} */ (
    jspb.Message.getWrapperField(this, proto.sym.models.Approval.Schema, 2));
};


/**
 * @param {?proto.sym.models.Approval.Schema|undefined} value
 * @return {!proto.sym.models.Approval} returns this
*/
proto.sym.models.Approval.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sym.models.Approval} returns this
 */
proto.sym.models.Approval.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sym.models.Approval.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Users users = 3;
 * @return {?proto.sym.models.Approval.Users}
 */
proto.sym.models.Approval.prototype.getUsers = function() {
  return /** @type{?proto.sym.models.Approval.Users} */ (
    jspb.Message.getWrapperField(this, proto.sym.models.Approval.Users, 3));
};


/**
 * @param {?proto.sym.models.Approval.Users|undefined} value
 * @return {!proto.sym.models.Approval} returns this
*/
proto.sym.models.Approval.prototype.setUsers = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sym.models.Approval} returns this
 */
proto.sym.models.Approval.prototype.clearUsers = function() {
  return this.setUsers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sym.models.Approval.prototype.hasUsers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Meta meta = 4;
 * @return {?proto.sym.models.Approval.Meta}
 */
proto.sym.models.Approval.prototype.getMeta = function() {
  return /** @type{?proto.sym.models.Approval.Meta} */ (
    jspb.Message.getWrapperField(this, proto.sym.models.Approval.Meta, 4));
};


/**
 * @param {?proto.sym.models.Approval.Meta|undefined} value
 * @return {!proto.sym.models.Approval} returns this
*/
proto.sym.models.Approval.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sym.models.Approval} returns this
 */
proto.sym.models.Approval.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sym.models.Approval.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.sym.models);
